{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\raulf\\\\Desktop\\\\nativeFrontend\\\\node_modules\\\\react-native-awesome-alerts\\\\src\\\\AwesomeAlert.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { BackAndroid } from \"react-native-web/dist/index\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PropTypes from 'prop-types';\nimport styles from \"./styles\";\nvar HwBackHandler = BackHandler || BackAndroid;\nvar HW_BACK_EVENT = 'hardwareBackPress';\nvar OS = Platform.OS;\n\nvar AwesomeAlert = function (_Component) {\n  _inherits(AwesomeAlert, _Component);\n\n  var _super = _createSuper(AwesomeAlert);\n\n  function AwesomeAlert(props) {\n    var _this;\n\n    _classCallCheck(this, AwesomeAlert);\n\n    _this = _super.call(this, props);\n\n    _this._springShow = function (fromConstructor) {\n      var _this$props$useNative = _this.props.useNativeDriver,\n          useNativeDriver = _this$props$useNative === void 0 ? false : _this$props$useNative;\n\n      _this._toggleAlert(fromConstructor);\n\n      Animated.spring(_this.springValue, {\n        toValue: 1,\n        bounciness: 10,\n        useNativeDriver: useNativeDriver\n      }).start();\n    };\n\n    _this._springHide = function () {\n      var _this$props$useNative2 = _this.props.useNativeDriver,\n          useNativeDriver = _this$props$useNative2 === void 0 ? false : _this$props$useNative2;\n\n      if (_this.state.showSelf === true) {\n        Animated.spring(_this.springValue, {\n          toValue: 0,\n          tension: 10,\n          useNativeDriver: useNativeDriver\n        }).start();\n        setTimeout(function () {\n          _this._toggleAlert();\n\n          _this._onDismiss();\n        }, 70);\n      }\n    };\n\n    _this._toggleAlert = function (fromConstructor) {\n      if (fromConstructor) _this.state = {\n        showSelf: true\n      };else _this.setState({\n        showSelf: !_this.state.showSelf\n      });\n    };\n\n    _this._handleHwBackEvent = function () {\n      var closeOnHardwareBackPress = _this.props.closeOnHardwareBackPress;\n\n      if (_this.state.showSelf && closeOnHardwareBackPress) {\n        _this._springHide();\n\n        return true;\n      } else if (!closeOnHardwareBackPress && _this.state.showSelf) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this._onTapOutside = function () {\n      var closeOnTouchOutside = _this.props.closeOnTouchOutside;\n      if (closeOnTouchOutside) _this._springHide();\n    };\n\n    _this._onDismiss = function () {\n      var onDismiss = _this.props.onDismiss;\n      onDismiss && onDismiss();\n    };\n\n    _this._renderButton = function (data) {\n      var text = data.text,\n          backgroundColor = data.backgroundColor,\n          buttonStyle = data.buttonStyle,\n          buttonTextStyle = data.buttonTextStyle,\n          onPress = data.onPress;\n      return React.createElement(TouchableOpacity, {\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: [styles.button, {\n          backgroundColor: backgroundColor\n        }, buttonStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: [styles.buttonText, buttonTextStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }\n      }, text)));\n    };\n\n    _this._renderAlert = function () {\n      var animation = {\n        transform: [{\n          scale: _this.springValue\n        }]\n      };\n      var showProgress = _this.props.showProgress;\n      var _this$props = _this.props,\n          title = _this$props.title,\n          message = _this$props.message,\n          _this$props$customVie = _this$props.customView,\n          customView = _this$props$customVie === void 0 ? null : _this$props$customVie;\n      var _this$props2 = _this.props,\n          showCancelButton = _this$props2.showCancelButton,\n          cancelText = _this$props2.cancelText,\n          cancelButtonColor = _this$props2.cancelButtonColor,\n          cancelButtonStyle = _this$props2.cancelButtonStyle,\n          cancelButtonTextStyle = _this$props2.cancelButtonTextStyle,\n          onCancelPressed = _this$props2.onCancelPressed;\n      var _this$props3 = _this.props,\n          showConfirmButton = _this$props3.showConfirmButton,\n          confirmText = _this$props3.confirmText,\n          confirmButtonColor = _this$props3.confirmButtonColor,\n          confirmButtonStyle = _this$props3.confirmButtonStyle,\n          confirmButtonTextStyle = _this$props3.confirmButtonTextStyle,\n          onConfirmPressed = _this$props3.onConfirmPressed;\n      var _this$props4 = _this.props,\n          alertContainerStyle = _this$props4.alertContainerStyle,\n          overlayStyle = _this$props4.overlayStyle,\n          progressSize = _this$props4.progressSize,\n          progressColor = _this$props4.progressColor,\n          contentContainerStyle = _this$props4.contentContainerStyle,\n          contentStyle = _this$props4.contentStyle,\n          titleStyle = _this$props4.titleStyle,\n          messageStyle = _this$props4.messageStyle,\n          actionContainerStyle = _this$props4.actionContainerStyle;\n      var cancelButtonData = {\n        text: cancelText,\n        backgroundColor: cancelButtonColor,\n        buttonStyle: cancelButtonStyle,\n        buttonTextStyle: cancelButtonTextStyle,\n        onPress: onCancelPressed\n      };\n      var confirmButtonData = {\n        text: confirmText,\n        backgroundColor: confirmButtonColor,\n        buttonStyle: confirmButtonStyle,\n        buttonTextStyle: confirmButtonTextStyle,\n        onPress: onConfirmPressed\n      };\n      return React.createElement(View, {\n        style: [styles.container, alertContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: _this._onTapOutside,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: [styles.overlay, overlayStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }\n      })), React.createElement(Animated.View, {\n        style: [styles.contentContainer, animation, contentContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: [styles.content, contentStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }\n      }, showProgress ? React.createElement(ActivityIndicator, {\n        size: progressSize,\n        color: progressColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }\n      }) : null, title ? React.createElement(Text, {\n        style: [styles.title, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      }, title) : null, message ? React.createElement(Text, {\n        style: [styles.message, messageStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }\n      }, message) : null, customView), React.createElement(View, {\n        style: [styles.action, actionContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }\n      }, showCancelButton ? _this._renderButton(cancelButtonData) : null, showConfirmButton ? _this._renderButton(confirmButtonData) : null)));\n    };\n\n    var show = _this.props.show;\n    _this.springValue = new Animated.Value(0.3);\n    _this.state = {\n      showSelf: false\n    };\n    if (show) _this._springShow(true);\n    return _this;\n  }\n\n  _createClass(AwesomeAlert, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      HwBackHandler.addEventListener(HW_BACK_EVENT, this._handleHwBackEvent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          show = _this$state.show,\n          showSelf = _this$state.showSelf;\n      var _this$props5 = this.props,\n          _this$props5$modalPro = _this$props5.modalProps,\n          modalProps = _this$props5$modalPro === void 0 ? {} : _this$props5$modalPro,\n          closeOnHardwareBackPress = _this$props5.closeOnHardwareBackPress;\n      var wrapInModal = OS === 'android' || OS === 'ios';\n      return showSelf ? wrapInModal ? React.createElement(Modal, _extends({\n        animationType: \"none\",\n        transparent: true,\n        visible: show,\n        onRequestClose: function onRequestClose() {\n          if (showSelf && closeOnHardwareBackPress) {\n            _this2._springHide();\n          }\n        }\n      }, modalProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }\n      }), this._renderAlert()) : this._renderAlert() : null;\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var show = nextProps.show;\n      var showSelf = this.state.showSelf;\n      if (show && !showSelf) this._springShow();else if (show === false && showSelf) this._springHide();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      HwBackHandler.removeEventListener(HW_BACK_EVENT, this._handleHwBackEvent);\n    }\n  }]);\n\n  return AwesomeAlert;\n}(Component);\n\nexport { AwesomeAlert as default };\nAwesomeAlert.propTypes = {\n  show: PropTypes.bool,\n  useNativeDriver: PropTypes.bool,\n  showProgress: PropTypes.bool,\n  title: PropTypes.string,\n  message: PropTypes.string,\n  closeOnTouchOutside: PropTypes.bool,\n  closeOnHardwareBackPress: PropTypes.bool,\n  showCancelButton: PropTypes.bool,\n  showConfirmButton: PropTypes.bool,\n  cancelText: PropTypes.string,\n  confirmText: PropTypes.string,\n  cancelButtonColor: PropTypes.string,\n  confirmButtonColor: PropTypes.string,\n  onCancelPressed: PropTypes.func,\n  onConfirmPressed: PropTypes.func,\n  customView: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func]),\n  modalProps: PropTypes.object\n};\nAwesomeAlert.defaultProps = {\n  show: false,\n  useNativeDriver: false,\n  showProgress: false,\n  closeOnTouchOutside: true,\n  closeOnHardwareBackPress: true,\n  showCancelButton: false,\n  showConfirmButton: false,\n  cancelText: 'Cancel',\n  confirmText: 'Confirm',\n  cancelButtonColor: '#D0D0D0',\n  confirmButtonColor: '#AEDEF4',\n  customView: null,\n  modalProps: {}\n};","map":{"version":3,"sources":["C:/Users/raulf/Desktop/nativeFrontend/node_modules/react-native-awesome-alerts/src/AwesomeAlert.js"],"names":["React","Component","BackAndroid","PropTypes","styles","HwBackHandler","BackHandler","HW_BACK_EVENT","OS","Platform","AwesomeAlert","props","_springShow","fromConstructor","useNativeDriver","_toggleAlert","Animated","spring","springValue","toValue","bounciness","start","_springHide","state","showSelf","tension","setTimeout","_onDismiss","setState","_handleHwBackEvent","closeOnHardwareBackPress","_onTapOutside","closeOnTouchOutside","onDismiss","_renderButton","data","text","backgroundColor","buttonStyle","buttonTextStyle","onPress","button","buttonText","_renderAlert","animation","transform","scale","showProgress","title","message","customView","showCancelButton","cancelText","cancelButtonColor","cancelButtonStyle","cancelButtonTextStyle","onCancelPressed","showConfirmButton","confirmText","confirmButtonColor","confirmButtonStyle","confirmButtonTextStyle","onConfirmPressed","alertContainerStyle","overlayStyle","progressSize","progressColor","contentContainerStyle","contentStyle","titleStyle","messageStyle","actionContainerStyle","cancelButtonData","confirmButtonData","container","overlay","contentContainer","content","action","show","Value","addEventListener","modalProps","wrapInModal","nextProps","removeEventListener","propTypes","bool","string","func","oneOfType","element","node","object","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Text,\n  Animated,\n  View,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  ActivityIndicator,\n  BackAndroid,\n  BackHandler,\n  Modal,\n  Platform,\n} from 'react-native';\n\nimport PropTypes from 'prop-types';\n\nimport styles from './styles';\n\nconst HwBackHandler = BackHandler || BackAndroid;\nconst HW_BACK_EVENT = 'hardwareBackPress';\n\nconst { OS } = Platform;\n\nexport default class AwesomeAlert extends Component {\n  constructor(props) {\n    super(props);\n    const { show } = this.props;\n    this.springValue = new Animated.Value(0.3);\n\n    this.state = {\n      showSelf: false,\n    };\n\n    if (show) this._springShow(true);\n  }\n\n  componentDidMount() {\n    HwBackHandler.addEventListener(HW_BACK_EVENT, this._handleHwBackEvent);\n  }\n\n  _springShow = (fromConstructor) => {\n    const { useNativeDriver = false } = this.props;\n\n    this._toggleAlert(fromConstructor);\n    Animated.spring(this.springValue, {\n      toValue: 1,\n      bounciness: 10,\n      useNativeDriver,\n    }).start();\n  };\n\n  _springHide = () => {\n    const { useNativeDriver = false } = this.props;\n\n    if (this.state.showSelf === true) {\n      Animated.spring(this.springValue, {\n        toValue: 0,\n        tension: 10,\n        useNativeDriver,\n      }).start();\n\n      setTimeout(() => {\n        this._toggleAlert();\n        this._onDismiss();\n      }, 70);\n    }\n  };\n\n  _toggleAlert = (fromConstructor) => {\n    if (fromConstructor) this.state = { showSelf: true };\n    else this.setState({ showSelf: !this.state.showSelf });\n  };\n\n  _handleHwBackEvent = () => {\n    const { closeOnHardwareBackPress } = this.props;\n    if (this.state.showSelf && closeOnHardwareBackPress) {\n      this._springHide();\n      return true;\n    } else if (!closeOnHardwareBackPress && this.state.showSelf) {\n      return true;\n    }\n\n    return false;\n  };\n\n  _onTapOutside = () => {\n    const { closeOnTouchOutside } = this.props;\n    if (closeOnTouchOutside) this._springHide();\n  };\n\n  _onDismiss = () => {\n    const { onDismiss } = this.props;\n    onDismiss && onDismiss();\n  };\n\n  _renderButton = (data) => {\n    const {\n      text,\n      backgroundColor,\n      buttonStyle,\n      buttonTextStyle,\n      onPress,\n    } = data;\n\n    return (\n      <TouchableOpacity onPress={onPress}>\n        <View style={[styles.button, { backgroundColor }, buttonStyle]}>\n          <Text style={[styles.buttonText, buttonTextStyle]}>{text}</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  _renderAlert = () => {\n    const animation = { transform: [{ scale: this.springValue }] };\n\n    const { showProgress } = this.props;\n    const { title, message, customView = null } = this.props;\n\n    const {\n      showCancelButton,\n      cancelText,\n      cancelButtonColor,\n      cancelButtonStyle,\n      cancelButtonTextStyle,\n      onCancelPressed,\n    } = this.props;\n    const {\n      showConfirmButton,\n      confirmText,\n      confirmButtonColor,\n      confirmButtonStyle,\n      confirmButtonTextStyle,\n      onConfirmPressed,\n    } = this.props;\n\n    const {\n      alertContainerStyle,\n      overlayStyle,\n      progressSize,\n      progressColor,\n      contentContainerStyle,\n      contentStyle,\n      titleStyle,\n      messageStyle,\n      actionContainerStyle,\n    } = this.props;\n\n    const cancelButtonData = {\n      text: cancelText,\n      backgroundColor: cancelButtonColor,\n      buttonStyle: cancelButtonStyle,\n      buttonTextStyle: cancelButtonTextStyle,\n      onPress: onCancelPressed,\n    };\n\n    const confirmButtonData = {\n      text: confirmText,\n      backgroundColor: confirmButtonColor,\n      buttonStyle: confirmButtonStyle,\n      buttonTextStyle: confirmButtonTextStyle,\n      onPress: onConfirmPressed,\n    };\n\n    return (\n      <View style={[styles.container, alertContainerStyle]}>\n        <TouchableWithoutFeedback onPress={this._onTapOutside}>\n          <View style={[styles.overlay, overlayStyle]} />\n        </TouchableWithoutFeedback>\n        <Animated.View\n          style={[styles.contentContainer, animation, contentContainerStyle]}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {showProgress ? (\n              <ActivityIndicator size={progressSize} color={progressColor} />\n            ) : null}\n            {title ? (\n              <Text style={[styles.title, titleStyle]}>{title}</Text>\n            ) : null}\n            {message ? (\n              <Text style={[styles.message, messageStyle]}>{message}</Text>\n            ) : null}\n            {customView}\n          </View>\n          <View style={[styles.action, actionContainerStyle]}>\n            {showCancelButton ? this._renderButton(cancelButtonData) : null}\n            {showConfirmButton ? this._renderButton(confirmButtonData) : null}\n          </View>\n        </Animated.View>\n      </View>\n    );\n  };\n\n  render() {\n    const { show, showSelf } = this.state;\n    const { modalProps = {}, closeOnHardwareBackPress } = this.props;\n\n    const wrapInModal = OS === 'android' || OS === 'ios';\n\n    return showSelf ?\n      wrapInModal ? (\n        <Modal\n          animationType=\"none\"\n          transparent={true}\n          visible={show}\n          onRequestClose={() => {\n            if (showSelf && closeOnHardwareBackPress) {\n              this._springHide();\n            }\n          }}\n          {...modalProps}\n        >\n          {this._renderAlert()}\n        </Modal>\n      ) : this._renderAlert()\n    : null;\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { show } = nextProps;\n    const { showSelf } = this.state;\n\n    if (show && !showSelf) this._springShow();\n    else if (show === false && showSelf) this._springHide();\n  }\n\n  componentWillUnmount() {\n    HwBackHandler.removeEventListener(HW_BACK_EVENT, this._handleHwBackEvent);\n  }\n}\n\nAwesomeAlert.propTypes = {\n  show: PropTypes.bool,\n  useNativeDriver: PropTypes.bool,\n  showProgress: PropTypes.bool,\n  title: PropTypes.string,\n  message: PropTypes.string,\n  closeOnTouchOutside: PropTypes.bool,\n  closeOnHardwareBackPress: PropTypes.bool,\n  showCancelButton: PropTypes.bool,\n  showConfirmButton: PropTypes.bool,\n  cancelText: PropTypes.string,\n  confirmText: PropTypes.string,\n  cancelButtonColor: PropTypes.string,\n  confirmButtonColor: PropTypes.string,\n  onCancelPressed: PropTypes.func,\n  onConfirmPressed: PropTypes.func,\n  customView: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.node,\n    PropTypes.func,\n  ]),\n  modalProps: PropTypes.object,\n};\n\nAwesomeAlert.defaultProps = {\n  show: false,\n  useNativeDriver: false,\n  showProgress: false,\n  closeOnTouchOutside: true,\n  closeOnHardwareBackPress: true,\n  showCancelButton: false,\n  showConfirmButton: false,\n  cancelText: 'Cancel',\n  confirmText: 'Confirm',\n  cancelButtonColor: '#D0D0D0',\n  confirmButtonColor: '#AEDEF4',\n  customView: null,\n  modalProps: {},\n};\n"]},"metadata":{},"sourceType":"module"}